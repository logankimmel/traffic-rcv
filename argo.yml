apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: traffic-rcv-
  labels:
    workflows.argoproj.io/archive-strategy: "false"
spec:
  entrypoint: cicd
  templates:
  - name: cicd
    steps:
      - - name: checkout
          template: checkout
      - - name: build-push-docker
          template: build-push-docker
          arguments:
            artifacts:
            - name: git-repo
              from: "{{steps.checkout.outputs.artifacts.source}}"
            parameters:
            - name: image-tag
              value: "{{steps.checkout.outputs.parameters.tag}}"
      - - name: image-scan
          template: image-scan
          arguments:
            parameters:
            - name: image-tag
              value: "{{steps.checkout.outputs.parameters.tag}}"
      - - name: image-check
          template: image-check
          arguments:
            parameters:
            - name: image-tag
              value: "{{steps.checkout.outputs.parameters.tag}}"
            artifacts:
            - name: git-repo
              from: "{{steps.checkout.outputs.artifacts.source}}"
      - - name: render-helm
          template: render-helm
          arguments:
            parameters:
            - name: image-tag
              value: "{{steps.checkout.outputs.parameters.tag}}"
            artifacts:
            - name: git-repo
              from: "{{steps.checkout.outputs.artifacts.source}}"
      - - name: deployment-check
          template: deployment-check
          arguments:
            artifacts:
            - name: helm-chart
              from: "{{steps.render-helm.outputs.artifacts.helm-chart}}"
  - name: checkout
    inputs:
      artifacts:
      - name: git-repo
        path: /src
        git:
          repo: "https://github.com/logankimmel/traffic-rcv.git"
    metadata:
      labels:
        app: argo
    container:
      image: alpine/git
      resources: 
        requests:
          cpu: 100m
          memory: 100Mi
        limits: 
          cpu: 400m
          memory: 800Mi
      command: [sh, -c]
      args: ["cd /src && git rev-parse --short HEAD > /tmp/git-commit"]
    outputs:
      artifacts:
      - name: source
        path: /src
      parameters:
      - name: tag
        valueFrom:
          path: /tmp/git-commit
  - name: build-push-docker
    inputs:
      artifacts:
      - name: git-repo
        path: /src
      parameters:
      - name: image-tag
    metadata:
      labels:
        app: argo
    container:
      image: gcr.io/kaniko-project/executor:debug
      resources: 
        requests:
          cpu: 100m
          memory: 100Mi
        limits: 
          cpu: 400m
          memory: 800Mi
      workingDir: /src
      command: ["/kaniko/executor"]
      args: [
        '--context', '/src', '--dockerfile', '/src/Dockerfile', '--destination',
        "docker.io/logankimmel/traffic-rcv:{{inputs.parameters.image-tag}}"
        ]
      volumeMounts:
      - name: regcred
        mountPath: /kaniko/.docker
  - name: image-scan
    inputs:
      parameters:
      - name: image-tag
    metadata:
      labels:
        app: argo
    container:
      image: stackrox.io/main:3.0.46.0
      env:
      - name: ROX_API_TOKEN
        valueFrom:
          secretKeyRef:
            name: rox-api
            key: data
      command: [/bin/sh, -c]
      args: ["ROX_API_TOKEN=$(echo $ROX_API_TOKEN|tr -d '\n') && /assets/downloads/cli/roxctl-linux image scan --image logankimmel/traffic-rcv:{{inputs.parameters.image-tag}} -e central.rox.binbytes.io:443 > /tmp/scan-output.json"]
    outputs:
      artifacts:
      - name: scan-output
        path: /tmp/scan-output.json
  - name: image-check
    inputs:
      artifacts:
      - name: git-repo
        path: /src
      parameters:
      - name: image-tag
    metadata:
      labels:
        app: argo
    container:
      image: stackrox.io/main:3.0.46.0
      env:
      - name: ROX_API_TOKEN
        valueFrom:
          secretKeyRef:
            name: rox-api
            key: data
      command: [/bin/sh, -c]
      args: ["ROX_API_TOKEN=$(echo $ROX_API_TOKEN|tr -d '\n') && /assets/downloads/cli/roxctl-linux image check --image logankimmel/traffic-rcv:{{inputs.parameters.image-tag}} -e central.rox.binbytes.io:443 > /tmp/build-output.json"]
    outputs:
      artifacts:
      - name: build-output
        path: /tmp/build-output.json
  - name: render-helm
    inputs:
      artifacts:
      - name: git-repo
        path: /src
      parameters:
      - name: image-tag
    metadata:
      labels:
        app: argo
    container:
      image: alpine/helm:3.2.4
      command: [/bin/sh, -c]
      args: ["helm template traffic-rcv /src/traffic-rcv  --set=image.repository=docker.io/logankimmel/traffic-rcv:{{inputs.parameters.image-tag}} > /tmp/chart.yaml"]
    outputs:
      artifacts:
      - name: helm-chart
        path: /tmp/chart.yaml
  - name: deployment-check
    inputs:
      artifacts:
      - name: helm-chart
        path: /tmp/chart.yaml
    metadata:
      labels:
        app: argo
    container:
      image: stackrox.io/main:3.0.46.0
      env:
      - name: ROX_API_TOKEN
        valueFrom:
          secretKeyRef:
            name: rox-api
            key: data
      command: [/bin/sh, -c]
      args: ["ROX_API_TOKEN=$(echo $ROX_API_TOKEN|tr -d '\n') && /assets/downloads/cli/roxctl-linux deployment check --file /tmp/chart.yaml -e central.rox.binbytes.io:443"]
  imagePullSecrets:
  - name: stackrox-io
  ttlStrategy:
    secondsAfterCompletion: 3600
  volumes:
  - name: regcred
    secret:
      secretName: regcred
    
   
